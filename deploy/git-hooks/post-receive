#!/usr/bin/env node
// post-receive hook for git-push deployments
const fs = require('fs')
const path = require('path')
const readline = require('readline')
const { spawn } = require('child_process')
const rl = readline.createInterface({ input: process.stdin, terminal: false })

deployPath = '/home/protected/cv'
deployBranch = 'master'
publicPath = '/home/public'

// Return logger with a color code
function logger(code) {
    return (msg) => console.log(`\x1b[${code}m%s\x1b[0m`, msg)
}
const error = logger('91')
const info = logger('94')

function run(cmd, options) {
    return new Promise((res, rej) => {
        let defaultOptions = { shell: true }
        let p = spawn(cmd, Object.assign(defaultOptions, options))
        let stderr = ''
        p.stdout.pipe(process.stdout)
        p.stderr.on('data', (chunk) => stderr += chunk)
        p.on('error', rej)
        p.on('close', (code) => {
            if (code) return rej(stderr)
            res()
        })
    })
}

async function postReceive(fromCommit, toCommit, branch) {
    // Only deploy if branch matches
    if (!branch.endsWith(`/${deployBranch}`)) {
        throw `Received branch ${branch}, not deploying`
    }

    // Copy files
    info(`Deploying ${branch} (${toCommit}) to ${deployPath}...`)
    await run(`git --work-tree "${deployPath}" checkout -f ${branch}`)

    // Install dependencies
    info('Installing GUI dependencies...')
    await run('npm install', { cwd: path.join(deployPath, 'gui') })
    info('Installing server dependencies...')
    await run('npm install', { cwd: path.join(deployPath, 'server') })

    // Compile GUI
    await run('npm run build', { cwd: path.join(deployPath, 'gui') })

    // Copy to the public folder
    await run(`rsync -r ${path.join(deployPath, 'gui', 'public')}/ ${publicPath}`)

    info('Deployment Successful')
}

rl.on('line', line => {
    postReceive(...line.split(' ')).catch(error)
})